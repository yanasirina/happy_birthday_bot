from consts import API_CATS_URL, POSSIBLE_BUTTONS, BUTTONS
from db_client import DBClient
from keyboards.yes_no_keyboard import question_keyboard, yes_keyboard
from keyboards.dynamic_keyboard import create_inline_kb
from keyboards.numbers_keyboard import keyboard_for_cats

import os
import asyncio

import requests
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import CallbackQuery
import dotenv


dotenv.load_dotenv()

# –í–º–µ—Å—Ç–æ BOT TOKEN –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É @BotFather
API_TOKEN: str = os.getenv('BOT_TOKEN')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ (—Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ MemoryStorage)
storage: MemoryStorage = MemoryStorage()

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot: Bot = Bot(token=API_TOKEN)
dp: Dispatcher = Dispatcher(bot, storage=storage)
db_client: DBClient = DBClient()


# C–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –æ—Ç StatesGroup, –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—à–µ–π FSM
class FSMFillForm(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    fill_username = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    fill_password = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è


# C–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å, –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –æ—Ç StatesGroup, –¥–ª—è –≥—Ä—É–ø–ø—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞—à–µ–π FSM
class FSMChooseGifts(StatesGroup):
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∫–ª–∞—Å—Å–∞ State, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    # –ø–µ—Ä–µ—á–∏—Å–ª—è—è –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è
    # –±–æ—Ç –≤ —Ä–∞–∑–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    first_gift = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    second_gift = State()        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    third_gift = State()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã "/start" –∏ "/help" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç
@dp.message_handler(commands=['start', 'help'])
async def process_start_help_commands(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!üëã\n\n'
                         '–ï—Å–ª–∏ —Ç—ã –Ω–∞—à–µ–ª —ç—Ç–æ—Ç –±–æ—Ç, —Ç–æ, –Ω–∞–≤–µ—Ä–Ω–æ–µ, —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å. '
                         '–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –Ω–∞–∂–º–∏ /login\n\n'
                         '–ù–æ –µ—Å–ª–∏ —Ç—ã —Å–ª—É—á–∞–π–Ω–æ –æ–∫–∞–∑–∞–ª—Å—è –∑–¥–µ—Å—å, —è –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∫–æ—Ç–∏–∫–∞–º–∏ '
                         '(–¥–∞–∂–µ –Ω–µ –æ–¥–Ω—É)üê± '
                         '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ /cat')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cat" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –∫–æ—Ç–∏–∫–æ–º –≤ —á–∞—Ç
@dp.message_handler(commands=['cat'])
async def process_cat_command(message: types.Message):
    cat_response = requests.get(API_CATS_URL)
    if cat_response.status_code == 200:
        cat_link = cat_response.json()['file']
        await message.answer_photo(cat_link)
    else:
        await message.answer('–ö–æ—Ç–∏–∫–∞ –Ω–µ—Çüòø')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/login" –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler(commands=['login'])
async def process_login_command(message: types.Message):
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω')
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
    await FSMFillForm.fill_username.set()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
async def warning_not_username(message: types.Message):
    await message.answer(text='–¢–æ, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ª–æ–≥–∏–Ω\n'
                              '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω\n\n'
                              '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /cancel')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–æ–≥–∏–Ω
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
async def process_username_sent(message: types.Message, state: FSMContext):
    username = message.text
    username_is_correct = db_client.check_username(username)

    # C –ø–æ–º–æ—â—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π
    # –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ –∫–ª—é—á—É "username"
    if username_is_correct:
        async with state.proxy() as data:
            data['username'] = message.text
        await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–∞—Ä–æ–ª—å')
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
        await FSMFillForm.fill_password.set()

    else:
        await message.answer(text='–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω\n\n'
                                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É, —á—Ç–æ –≤—Å–µ —Å–ª–æ–º–∞–ª–æ—Å—åü§Ø\n\n'
                                  '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /cancel')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
async def warning_not_password(message: types.Message):
    await message.answer(text='–¢–æ, —á—Ç–æ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–∞—Ä–æ–ª—å\n'
                              '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å\n\n'
                              '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /cancel')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å
# –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
async def process_password_sent(message: types.Message, state: FSMContext):
    password = message.text
    data = await state.get_data()
    username = data['username']
    user_id = db_client.check_password(username, password)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id:
        if not db_client.is_logged_in(user_id):
            db_client.log_in(user_id, message.chat.id)
            await message.answer(text='–°–ø–∞—Å–∏–±–æ!\n\n'
                                      '–¢–µ–ø–µ—Ä—å —Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µüéâüíú')
            await send_congrats(message, state)

        else:
            await message.answer(text='–Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è!\n\n'
                                      '–ú–µ–Ω—è –Ω–µ –æ–±–º–∞–Ω—É—Ç—åüòÑ')
            await state.finish()

    else:
        await message.answer(text='–ö–∞–∂–µ—Ç—Å—è, —Ç—ã –≤–≤–µ–ª –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å\n\n'
                                  '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É, —á—Ç–æ –≤—Å–µ —Å–ª–æ–º–∞–ª–æ—Å—åü§Ø\n\n'
                                  '–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã - –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /cancel')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/cancel"
# –∏ –æ—Ç–∫–ª—é—á–∞—Ç—å –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
async def process_cancel_command(message: types.Message, state: FSMContext):
    await message.answer(text='–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π\n\n'
                              '–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - '
                              '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /login')
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.reset_state()


# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
async def send_congrats(message: types.Message, state: FSMContext):
    await state.finish()
    with open('media/other/first_video.MOV', 'rb') as video:
        await message.answer_video(video)
    await asyncio.sleep(3)

    await message.answer('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ —Ç—Ä—É–¥–Ω—ã–π –≥–æ–¥')
    await asyncio.sleep(3)
    await message.answer(text='–ò —á—Ç–æ–±—ã —Ç—ã –Ω–µ —Å–∫—É—á–∞–ª, –ø—Ä–µ–¥–ª–∞–≥–∞—é —Å—ã–≥—Ä–∞—Ç—å –≤ –Ω–µ–±–æ–ª—å—à—É—é –∏–≥—Ä—É. –¢—ã —Å–æ–≥–ª–∞—Å–µ–Ω?',
                         reply_markup=question_keyboard)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç —Ç–∏–ø–∞ CallbackQuery
# —Å data 'big_button_1_pressed'
async def process_yes_button_press(callback: CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏ –ø–µ—Ä–≤—É—é —Ü–∏—Ñ—Ä—É"')
    await callback.answer(text='–í –∏–≥—Ä–µ –µ—Å—Ç—å 9 –Ω–æ–º–µ—Ä–æ–≤, –ø–æ–¥ –∫–∞–∂–¥—ã–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è (–∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è) –ø—Ä–∏–∑.'
                               '–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ 3 —Ü–∏—Ñ—Ä—ã –∏ –Ω–∞–¥–µ—è—Ç—å—Å—è –Ω–∞ —É–¥–∞—á—É!',
                          show_alert=True)
    keyboard = create_inline_kb(1, **BUTTONS)
    await callback.message.edit_reply_markup(keyboard)
    await FSMChooseGifts.first_gift.set()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –∞–ø–¥–µ–π—Ç —Ç–∏–ø–∞ CallbackQuery
# —Å data 'big_button_2_pressed'
async def process_no_button_press(callback: CallbackQuery):
    await callback.answer(text='–û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!', show_alert=True)
    await callback.message.edit_reply_markup(yes_keyboard)


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
async def warning_not_first_gift(message: types.Message):
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ '
                              '–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∞—Ä–∫–∞')


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏
# –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ
async def process_first_gift(callback: CallbackQuery, state: FSMContext):
    # C –ø–æ–º–æ—â—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª (callback.data –Ω–∞–∂–∞—Ç–æ–π
    # –∫–Ω–æ–ø–∫–∏) –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ –∫–ª—é—á—É "gender"
    async with state.proxy() as data:
        data['first_gift'] = callback.data
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    # —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏—è —Ç—ã–∫–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text='–°–ø–∞—Å–∏–±–æ! –í—ã–±–µ—Ä–∏ –≤—Ç–æ—Ä—É—é —Ü–∏—Ñ—Ä—É')

    data = await state.get_data()
    numbers = data.values()
    btns = {}
    for i in range(1, 10):
        btn_name = 'btn_' + str(i)
        if btn_name not in numbers:
            btns[btn_name] = str(i)
    keyboard = create_inline_kb(1, **btns)
    await callback.message.edit_reply_markup(keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    await FSMChooseGifts.second_gift.set()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
async def warning_not_second_gift(message: types.Message):
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ '
                              '–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∞—Ä–∫–∞')


async def process_second_gift(callback: CallbackQuery, state: FSMContext):
    # C –ø–æ–º–æ—â—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª (callback.data –Ω–∞–∂–∞—Ç–æ–π
    # –∫–Ω–æ–ø–∫–∏) –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ –∫–ª—é—á—É "gender"
    async with state.proxy() as data:
        data['second_gift'] = callback.data
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    # —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏—è —Ç—ã–∫–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text='–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É!')

    data = await state.get_data()
    numbers = data.values()
    btns = {}
    for i in range(1, 10):
        btn_name = 'btn_' + str(i)
        if btn_name not in numbers:
            btns[btn_name] = str(i)
    keyboard = create_inline_kb(1, **btns)
    await callback.message.edit_reply_markup(keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
    await FSMChooseGifts.third_gift.set()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
# –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–æ/–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á—Ç–æ-—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ
async def warning_not_third_gift(message: types.Message):
    await message.answer(text='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ '
                              '–ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∞—Ä–∫–∞')


async def process_third_gift(callback: CallbackQuery, state: FSMContext):
    # C –ø–æ–º–æ—â—å—é –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª (callback.data –Ω–∞–∂–∞—Ç–æ–π
    # –∫–Ω–æ–ø–∫–∏) –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ –∫–ª—é—á—É "gender"
    async with state.proxy() as data:
        data['third_gift'] = callback.data
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
    # —á—Ç–æ–±—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—ã–ª–æ –∂–µ–ª–∞–Ω–∏—è —Ç—ã–∫–∞—Ç—å –∫–Ω–æ–ø–∫–∏
    await callback.message.edit_text(text='–û—Å—Ç–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–∏—Ñ—Ä—É!')

    await give_gifts(callback, state)


async def give_gifts(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.finish()

    numbers = [gift[-1] for gift in data.values()]
    await callback.message.answer(f'–¢—ã –≤—ã–±—Ä–∞–ª –ø—Ä–∏–∑—ã {", ".join(numbers)}')

    with open(f'media/gift1/{numbers[0]}.jpg', 'rb') as photo:
        await callback.message.answer_photo(photo)
    with open(f'media/gift2/{numbers[1]}.jpg', 'rb') as photo:
        await callback.message.answer_photo(photo)
    with open(f'media/gift3/{numbers[2]}.jpg', 'rb') as photo:
        await callback.message.answer_photo(photo)

    await asyncio.sleep(3)
    await callback.message.answer('–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–∞–º–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ')

    with open(f'media/other/second_video.MOV', 'rb') as video:
        await callback.message.answer_video(video)

    await asyncio.sleep(3)
    await callback.message.answer(text='–ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ç–µ–∫—Å—Ç: —Å–∫–æ–ª—å–∫–æ –∫–æ—Ç–∏–∫–æ–≤ —Ö–æ—á–µ—à—å?', reply_markup=keyboard_for_cats)


async def send_cats(callback: CallbackQuery, number_of_cats: str):
    cats_dict = {
        '1': ['3.jpg'],
        '2': ['4.jpg', '3.jpg'],
        '3': ['4.jpg', '3.jpg', '2.jpg'],
        '4': ['4.jpg', '1.jpg', '3.jpg', '2.jpg'],
    }

    list_of_cats = cats_dict[number_of_cats]
    for cat in list_of_cats:
        with open(f'media/cats/{cat}', 'rb') as photo:
            await callback.message.answer_photo(photo)


async def process_number_button_press(callback: CallbackQuery):
    button_pressed = callback.data[0]
    await send_cats(callback, button_pressed)
    await callback.answer(text='–ù–∞ —ç—Ç–æ–º –≤—Å–µ. –° –î–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è!',
                          show_alert=True)
    await callback.message.delete()


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—ç–Ω–¥–ª–µ—Ä—ã
dp.register_message_handler(process_cancel_command, commands='cancel', state='*')
dp.register_message_handler(process_username_sent, content_types='text', state=FSMFillForm.fill_username)
dp.register_message_handler(warning_not_username, content_types='any', state=FSMFillForm.fill_username)
dp.register_message_handler(process_password_sent, content_types='text', state=FSMFillForm.fill_password)
dp.register_message_handler(warning_not_password, content_types='any', state=FSMFillForm.fill_password)
dp.register_callback_query_handler(process_yes_button_press, text='yes_button_pressed')
dp.register_callback_query_handler(process_no_button_press, text='no_button_pressed')
dp.register_callback_query_handler(process_first_gift, state=FSMChooseGifts.first_gift, text=POSSIBLE_BUTTONS)
dp.register_callback_query_handler(process_second_gift, state=FSMChooseGifts.second_gift, text=POSSIBLE_BUTTONS)
dp.register_callback_query_handler(process_third_gift, state=FSMChooseGifts.third_gift, text=POSSIBLE_BUTTONS)
dp.register_message_handler(warning_not_first_gift, state=FSMChooseGifts.first_gift, content_types='any')
dp.register_message_handler(warning_not_second_gift, state=FSMChooseGifts.second_gift, content_types='any')
dp.register_message_handler(warning_not_third_gift, state=FSMChooseGifts.third_gift, content_types='any')
dp.register_callback_query_handler(process_number_button_press, text=['1_button_pressed', '2_button_pressed',
                                                                      '3_button_pressed', '4_button_pressed'])


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
